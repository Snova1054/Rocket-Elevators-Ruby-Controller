#Defines a Column
class Column
    attr_accessor :ID, :status, :amountOfFloors, :amountOfElevators, :elevatorList, :callButtonList
    def initialize(id, amountOfFloors, amountOfElevators)
        @ID = id
        @status = 'idle'
        @amountOfFloors = amountOfFloors
        @amountOfElevators = amountOfElevators
        @elevatorList = []
        @callButtonList = []

        createElevators()
        createCallButtons()
    end
    #GOOD
    def createElevators
        elevatorID = 1
        for i in 1..@amountOfElevators do
            elevator = Elevator.new(elevatorID, @amountOfFloors)
            @elevatorList.push(elevator)
            elevatorID += 1
            # puts("Elevators creation #", i)
        end
    end

    def createCallButtons
        buttonFloor = 1
        callButtonID = 1
        # puts("createCallButton working")
        for i in 1..@amountOfFloors
            if buttonFloor < @amountOfFloors
                callButton = CallButton.new(callButtonID, buttonFloor, 'up')
                @callButtonList.append(callButton)
                callButtonID += 1
            end
            if buttonFloor > 1
                callButton = CallButton.new(callButtonID, buttonFloor, 'down')
                @callButtonList.append(callButton)
                callButtonID -= 1
            end
            buttonFloor +=1
        end
    end

    def requestElevator(floor, direction)
        elevator = findElevator(floor, direction)
        elevator.floorRequestList.append(floor)
        elevator.move
        elevator.operateDoors
        # puts("Elevator #", elevator.ID)
        return elevator
    end
    #GOOD
    def findElevator(requestedFloor, requestedDirection)
        bestElevator = @elevatorList[0]
        bestScore = 5
        referenceGap = 10000000

        bestElevatorInformations = [bestElevator, bestScore, referenceGap]
        for i in 0..@amountOfElevators-1
            # puts i
            # puts("ElevatorID",@elevatorList[i].ID,"is at floor",@elevatorList[i].currentFloor)

            if requestedFloor == @elevatorList[i].currentFloor && @elevatorList[i].status == 'stopped' && requestedDirection == @elevatorList[i].direction
                bestElevatorInformations = checkIfElevatorIsBetter(1, @elevatorList[i], bestScore, referenceGap, bestElevator, requestedFloor)
            elsif requestedFloor > @elevatorList[i].currentFloor && @elevatorList[i].direction == 'up' && requestedDirection == @elevatorList[i].direction
                bestElevatorInformations = checkIfElevatorIsBetter(2, @elevatorList[i], bestScore, referenceGap, bestElevator, requestedFloor)
            elsif requestedFloor < @elevatorList[i].currentFloor && @elevatorList[i].direction == 'down' && requestedDirection == @elevatorList[i].direction
                bestElevatorInformations = checkIfElevatorIsBetter(2, @elevatorList[i], bestScore, referenceGap, bestElevator, requestedFloor)
            elsif @elevatorList[i].status == 'idle'
                bestElevatorInformations = checkIfElevatorIsBetter(3, @elevatorList[i], bestScore, referenceGap, bestElevator, requestedFloor)
            else
                bestElevatorInformations = checkIfElevatorIsBetter(4, @elevatorList[i], bestScore, referenceGap, bestElevator, requestedFloor)
            end
            bestElevator = bestElevatorInformations[0]
            bestScore = bestElevatorInformations[1]
            referenceGap = bestElevatorInformations[2]
        end
        return bestElevatorInformations[0]
    end

    #GOOD
    def checkIfElevatorIsBetter(scoreToCheck, newElevator, bestScore, referenceGap, bestElevator, floor)
        if scoreToCheck < bestScore
            bestScore = scoreToCheck
            bestElevator = newElevator
            referenceGap = (newElevator.currentFloor - floor).abs
        elsif bestScore == scoreToCheck
            gap = (newElevator.currentFloor - floor).abs
            if referenceGap > gap
                bestElevator = newElevator
                referenceGap = gap
            end
        end
        bestElevatorInformations = [bestElevator, bestScore, referenceGap]
        return bestElevatorInformations
    end
end

#Defines an Elevator
class Elevator
    attr_accessor :ID, :status, :amountOfFloors, :amountOfFloors, :currentFloor, :direction, :door, :floorRequestButtonList, :floorRequestList
    def initialize(id, amountOfFloors)
        @ID = id
        @status = 'idle'
        @amountOfFloors = amountOfFloors
        @currentFloor = 1
        @direction = 'idle'
        @door = Door.new(id)
        @floorRequestButtonList = []
        @floorRequestList = []

        createFloorRequestButtons()
    end
    #GOOD
    def createFloorRequestButtons
        buttonFloor = 1
        floorRequestButtonID = 1
        for i in 1..amountOfFloors do
            floorRequestButton = FloorRequestButton.new(floorRequestButtonID, buttonFloor)
            @floorRequestButtonList.append(floorRequestButton)
            buttonFloor += 1
            floorRequestButtonID += 1
            # puts floorRequestButton.ID
        end
    end

    def requestFloor(floor)
        @floorRequestList.append(floor)
        # puts ("Floor request working")
        move()
        operateDoors()
    end
    #GOOD
    def move
        # puts ("inside MOVE LETS GO")
        while @floorRequestList.empty?() == false
            destination = @floorRequestList[0]
            @status = 'moving'
            if @currentFloor < destination
                @direction = 'up'
                sortFloorList()
                while @currentFloor < destination
                    @currentFloor +=1
                end
            elsif @currentFloor > destination
                @direction = 'down'
                sortFloorList()
                while @currentFloor > destination
                    @currentFloor -=1
                end
            end
            @status = 'stopped'
            @floorRequestList.pop
        end
        @status = 'idle'
        # puts @currentFloor
    end
    #GOOD
    def sortFloorList
        if @direction == 'up'
            @floorRequestList = @floorRequestList.sort()
        else
            @floorRequestList = @floorRequestList.sort().reverse
        end
    end
    #GOOD
    def operateDoors
        @door.status = 'opened'
        # puts "Waiting 5 seconds"
        @door.status = 'closed'
    end
end

#Defines a Floor Request Button
class FloorRequestButton
    attr_accessor :ID, :status, :floor
    def initialize(id, floor)
        @ID = id
        @status = 'off'
        @floor = floor
    end
end

#Defines a Call Button
class CallButton
    attr_accessor :ID, :status, :floor, :direction
    def initialize(id, floor, direction)
        @ID = id
        @status = 'off'
        @floor = floor
        @direction = direction
    end
end

#Defines a Door
class Door
    attr_accessor :ID, :status
    def initialize(id)
        @ID = id
        @status = 'closed'
    end
end

# column1 = Column.new(1, 10, 2)
# column1.elevatorList[0].currentFloor = 9
# column1.elevatorList[1].currentFloor = 8
# puts column1.elevatorList[0].currentFloor
# puts column1.elevatorList[1].currentFloor
# puts column1.elevatorList[0].currentFloor
# puts column1.elevatorList[1].currentFloor
# elevator1 = column1.requestElevator(3, 'down')
# puts elevator1.ID
# puts elevator1.currentFloor
# elevator1.requestFloor(1)
# puts elevator1.currentFloor
# # r = 0..5
